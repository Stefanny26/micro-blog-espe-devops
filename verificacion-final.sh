#!/bin/bash

# Verificaci√≥n final para despliegue p√∫blico inmediato
# Micro-Blog ESPE - DevOps Project

echo "üîç VERIFICACI√ìN FINAL - MICRO-BLOG ESPE"
echo "========================================"

# Colores
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

score=0
total=10

echo -e "\n${BLUE}üìã Verificando archivos cr√≠ticos...${NC}"

# 1. Verificar index.html principal
if [ -f "index.html" ] && grep -q "Micro-Blog ESPE" index.html; then
    echo -e "${GREEN}‚úÖ index.html principal presente y configurado${NC}"
    ((score++))
else
    echo -e "${RED}‚ùå index.html principal faltante o mal configurado${NC}"
fi

# 2. Verificar estructura del proyecto
if [ -d "frontend" ] && [ -d "backend" ] && [ -d "docs" ]; then
    echo -e "${GREEN}‚úÖ Estructura de directorios completa${NC}"
    ((score++))
else
    echo -e "${RED}‚ùå Estructura de directorios incompleta${NC}"
fi

# 3. Verificar documentaci√≥n
if [ -f "README.md" ] && [ -f "DESPLIEGUE-INMEDIATO.md" ] && [ -f "DEMO-LIVE.md" ]; then
    echo -e "${GREEN}‚úÖ Documentaci√≥n completa${NC}"
    ((score++))
else
    echo -e "${RED}‚ùå Documentaci√≥n incompleta${NC}"
fi

# 4. Verificar CI/CD
if [ -f ".github/workflows/ci-cd.yml" ] && [ -f ".github/workflows/deploy-netlify.yml" ]; then
    echo -e "${GREEN}‚úÖ Pipelines CI/CD configurados${NC}"
    ((score++))
else
    echo -e "${RED}‚ùå Pipelines CI/CD faltantes${NC}"
fi

# 5. Verificar tests
if [ -f "backend/tests/api.test.js" ] && [ -f "backend/jest.config.json" ]; then
    echo -e "${GREEN}‚úÖ Tests automatizados configurados${NC}"
    ((score++))
else
    echo -e "${RED}‚ùå Tests automatizados faltantes${NC}"
fi

# 6. Verificar Git
if [ -d ".git" ] && git status >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Repositorio Git inicializado${NC}"
    ((score++))
else
    echo -e "${RED}‚ùå Repositorio Git no inicializado${NC}"
fi

# 7. Verificar configuraciones de despliegue
if [ -f "netlify.toml" ] && [ -f "backend/Procfile" ]; then
    echo -e "${GREEN}‚úÖ Configuraciones de despliegue presentes${NC}"
    ((score++))
else
    echo -e "${RED}‚ùå Configuraciones de despliegue faltantes${NC}"
fi

# 8. Verificar scripts
if [ -f "setup-github-pages.sh" ] && [ -x "setup-github-pages.sh" ]; then
    echo -e "${GREEN}‚úÖ Scripts de automatizaci√≥n listos${NC}"
    ((score++))
else
    echo -e "${RED}‚ùå Scripts de automatizaci√≥n faltantes${NC}"
fi

# 9. Verificar frontend funcional
if grep -q "localStorage" index.html && grep -q "Bootstrap" index.html; then
    echo -e "${GREEN}‚úÖ Frontend funcional con persistencia${NC}"
    ((score++))
else
    echo -e "${RED}‚ùå Frontend no completamente funcional${NC}"
fi

# 10. Verificar backend
if [ -f "backend/server.js" ] && grep -q "express" backend/package.json; then
    echo -e "${GREEN}‚úÖ Backend API implementado${NC}"
    ((score++))
else
    echo -e "${RED}‚ùå Backend API faltante${NC}"
fi

echo -e "\n${BLUE}üìä RESULTADOS:${NC}"
echo -e "Puntuaci√≥n: ${GREEN}$score/$total${NC}"

if [ $score -eq $total ]; then
    echo -e "\n${GREEN}üéâ ¬°PERFECTO! Todo listo para despliegue p√∫blico${NC}"
    echo -e "\n${BLUE}üöÄ PR√ìXIMO PASO:${NC}"
    echo "1. Crear repo en GitHub: https://github.com/new"
    echo "2. Nombre: micro-blog-espe-devops (p√∫blico)"
    echo "3. Ejecutar:"
    echo -e "   ${YELLOW}git remote add origin https://github.com/TU-USUARIO/micro-blog-espe-devops.git${NC}"
    echo -e "   ${YELLOW}git push -u origin main${NC}"
    echo "4. Activar GitHub Pages en Settings > Pages"
    echo -e "5. ${GREEN}¬°App live en https://TU-USUARIO.github.io/micro-blog-espe-devops/${NC}"
elif [ $score -ge 8 ]; then
    echo -e "\n${YELLOW}‚ö†Ô∏è  Casi listo - revisar elementos faltantes${NC}"
else
    echo -e "\n${RED}‚ùå Necesita correcciones antes del despliegue${NC}"
fi

echo -e "\n${BLUE}üìñ Documentaci√≥n:${NC}"
echo "- Gu√≠a r√°pida: DESPLIEGUE-INMEDIATO.md"
echo "- Setup completo: docs/github-setup.md"
echo "- Checklist final: FINAL-CHECKLIST.md"

echo -e "\n${BLUE}‚è±Ô∏è  Tiempo estimado hasta link p√∫blico: 5-10 minutos${NC}"
